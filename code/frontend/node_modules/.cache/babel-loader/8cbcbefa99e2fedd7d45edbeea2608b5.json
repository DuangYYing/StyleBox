{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants';\nimport cookie from 'react-cookies';\n\nclass AuthenticationService {\n  // Login 方法传递username, password到后端\n  executeJwtAuthenticationService(usernameValue, passwordValue) {\n    let user = {\n      username: usernameValue,\n      password: passwordValue\n    };\n    return axios.post(`${API_URL}/login`, user, {\n      withCredentials: true\n    });\n  } // Register\n\n\n  registerUtil(usernameValue, emailValue, passwordValue, role) {\n    let user = {\n      username: usernameValue,\n      email: emailValue,\n      password: passwordValue\n    };\n    return axios.post(`${API_URL}/register`, {\n      user,\n      role\n    }, {\n      withCredentials: true\n    });\n  } // Login / register successful -> register成功后自动login\n\n\n  loginSuccessfulRegister(token) {\n    this.setupAxiosInterceptors(token);\n  } // 判断用户是否登录，通过cookie\n\n\n  isUserLoggedIn() {\n    let token = cookie.load('jwt');\n\n    if (token === undefined) {\n      return false;\n    }\n\n    return true;\n  } // Create Interceptors\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/wljudii/Desktop/project/project-team-07-blackbox/code/frontend/src/api/styleBox/AuthenticationService.js"],"names":["axios","API_URL","cookie","AuthenticationService","executeJwtAuthenticationService","usernameValue","passwordValue","user","username","password","post","withCredentials","registerUtil","emailValue","role","email","loginSuccessfulRegister","token","setupAxiosInterceptors","isUserLoggedIn","load","undefined","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,+BAA+B,CAACC,aAAD,EAAgBC,aAAhB,EAA8B;AACzD,QAAIC,IAAI,GAAG;AAACC,MAAAA,QAAQ,EAAEH,aAAX;AAA0BI,MAAAA,QAAQ,EAAEH;AAApC,KAAX;AACA,WAAON,KAAK,CAACU,IAAN,CAAY,GAAET,OAAQ,QAAtB,EAA+BM,IAA/B,EAAqC;AAACI,MAAAA,eAAe,EAAE;AAAlB,KAArC,CAAP;AACH,GANuB,CAQxB;;;AACAC,EAAAA,YAAY,CAACP,aAAD,EAAgBQ,UAAhB,EAA4BP,aAA5B,EAA2CQ,IAA3C,EAAgD;AACxD,QAAIP,IAAI,GAAG;AAACC,MAAAA,QAAQ,EAAEH,aAAX;AAA0BU,MAAAA,KAAK,EAAEF,UAAjC;AAA6CJ,MAAAA,QAAQ,EAAEH;AAAvD,KAAX;AACA,WAAON,KAAK,CAACU,IAAN,CAAY,GAAET,OAAQ,WAAtB,EAAkC;AAACM,MAAAA,IAAD;AAAOO,MAAAA;AAAP,KAAlC,EAAgD;AAACH,MAAAA,eAAe,EAAE;AAAlB,KAAhD,CAAP;AACH,GAZuB,CAcxB;;;AACAK,EAAAA,uBAAuB,CAACC,KAAD,EAAO;AAC1B,SAAKC,sBAAL,CAA4BD,KAA5B;AACH,GAjBuB,CAmBxB;;;AACAE,EAAAA,cAAc,GAAG;AACb,QAAIF,KAAK,GAAGf,MAAM,CAACkB,IAAP,CAAY,KAAZ,CAAZ;;AACA,QAAIH,KAAK,KAAKI,SAAd,EAAyB;AACrB,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GA1BuB,CA4BxB;;;AACAH,EAAAA,sBAAsB,CAACD,KAAD,EAAO;AACzBjB,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKN,cAAL,EAAJ,EAA0B;AACtBM,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BV,KAA/B;AACH;;AACD,aAAOQ,MAAP;AACH,KANL;AAQH;;AAtCuB;;AA2C5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport { API_URL } from '../../Constants'\r\nimport cookie from 'react-cookies'\r\n\r\nclass AuthenticationService {\r\n    \r\n    // Login 方法传递username, password到后端\r\n    executeJwtAuthenticationService(usernameValue, passwordValue){\r\n        let user = {username: usernameValue, password: passwordValue}\r\n        return axios.post(`${API_URL}/login`, user, {withCredentials: true})\r\n    }\r\n\r\n    // Register\r\n    registerUtil(usernameValue, emailValue, passwordValue, role){\r\n        let user = {username: usernameValue, email: emailValue, password: passwordValue}\r\n        return axios.post(`${API_URL}/register`, {user, role}, {withCredentials: true})\r\n    }\r\n\r\n    // Login / register successful -> register成功后自动login\r\n    loginSuccessfulRegister(token){\r\n        this.setupAxiosInterceptors(token)\r\n    }\r\n\r\n    // 判断用户是否登录，通过cookie\r\n    isUserLoggedIn() {\r\n        let token = cookie.load('jwt')\r\n        if (token === undefined) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    // Create Interceptors\r\n    setupAxiosInterceptors(token){\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()){\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}